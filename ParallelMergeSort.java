package paralel;

import java.util.concurrent.RecursiveAction;
import java.util.concurrent.ForkJoinPool;

public class ParallelMergeSort extends RecursiveAction {
    private static final int THRESHOLD = 1000; // Bir işlem için kullanılacak eşik değeri
    private final int[] array;
    private final int left;
    private final int right;

    public ParallelMergeSort(int[] array, int left, int right) {
        this.array = array;
        this.left = left;
        this.right = right;
    }

    @Override
    protected void compute() {
        if (right - left < THRESHOLD) {
            // Eşik değerinin altındaysa, normal merge sort kullan
            sort(array, left, right);
        } else {
            int middle = (left + right) / 2;

            // Paralel olarak iki alt görevi başlat
            ParallelMergeSort leftTask = new ParallelMergeSort(array, left, middle);
            ParallelMergeSort rightTask = new ParallelMergeSort(array, middle + 1, right);

            invokeAll(leftTask, rightTask);

            // İki alt diziyi birleştir
            merge(array, left, middle, right);
        }
    }

    private void sort(int[] array, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;

            sort(array, left, middle);
            sort(array, middle + 1, right);

            merge(array, left, middle, right);
        }
    }

    private void merge(int[] array, int left, int middle, int right) {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        int[] L = new int[n1]; // geçici olarak dizileri kopyalar
        int[] R = new int[n2];

        System.arraycopy(array, left, L, 0, n1);
        System.arraycopy(array, middle + 1, R, 0, n2);

        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                array[k] = L[i];
                i++;
            } else {
                array[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            array[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            array[k] = R[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        int[] array = {260,315,1110,1089,1398,1102,1914,4442,4214,4171,2055,1274,3051,4184,1173,1065,794,4041,2690,3968,878,2855,4874,4632,3539,2396,3661,2664,3052,3345,3347,2450,3176,3526,2919,3218,742,1777,110,1467,2333,4023,2554,1385,245,21,3403,856,3647,1990,4201,3084,1016,758,3473,4934,4068,4009,4162,4427,4245,2397,1682,977,1522,4824,720,1323,945,3670,103,3094,1758,140,3259,3016,3003,3442,407,3506,4883,2152,1490,782,3963,1283,3135,1430,4027,2162,3174,343,3976,3883,1742,105,1021,307,838,2774,1246,3800,1947,4678,527,818,184,3223,3126,2150,1695,3237,1125,2979,4522,276,3032,4618,4402,1727,3908,585,613,52,2752,637,319,2620,2355,3982,2044,2087,1336,3629,3811,3282,567,983,3368,4189,3318,3887,2240,4519,3336,4480,3752,4122,3014,1651,4395,1092,1142,4363,2214,300,4782,3789,3188,2638,3519,2753,1374,1359,77,4784,2713,1934,1447,3071,1737,3577,1073,3636,4570,446,1692,1245,3134,4584,3160,464,3428,286,288,2102,1184,1674,422,3344,735,2653,3430,1444,4839,2990,1869,1446,1708,3835,2075,836,1497,2691,97,478,3538,1232,90,498,1706,1346,1687,3827,638,810,1790,694,2421,3859,3450,258,48,771,4059,1137,2299,2279,1582,293,885,4763,628,4335,3644,3614,1524,2806,3297,4972,3797,33,2555,1896,867,1333,776,4621,798,4250,3845,4366,1887,4298,1332,402,4296,710,4468,1334,2242,2340,2537,4172,4234,1432,1873,907,2383,4477,1913,1950,1553,3058,4133,582,4558,3179,3602,1437,958,3713,1881,1664,652,580,1752,2887,270,2045,2910,1982,218,4293,1618,1367,700,763,1949,151,2016,3899,2501,99,1151,3566,2392,4789,4342,3332,2612,2833,2178,1676,1307,3408,1124,3119,4843,4262,1818,4967,3590,178,3934,1130,1604,2454,2136,1944,2766,1192,4532,2782,1620,3494,1690,2381,3434,4070,4566,1918,920,11,3729,3328,2272,3096,2106,3489,4030,3664,1429,3317,2406,640,3024,4774,4312,1135,3511,2847,2353,1044,1931,579,266,1384,1087,1293,4305,2745,1091,487,4828,982,2733,2906,1154,3715,3479,3756,4094,4929,2994,2610,3483,968,2960,4452,2274,176,1603,495,2316,4716,3289,3027,1496,163,1617,1861,4280,591,4180,1107,3348,2198,573,3070,2401,2278,455,4653,783,486,4581,320,2468,14,4743,1013,57,852,4878,144,1826,1473,4960,3249,174,1416,1230,642,502,3781,432,4845,332,3040,3458,1176,3339,2197,4394,951,3818,4589,1459,896,1766,812,362,66,3095,1418,2476,3977,1209,4487,213,1668,3220,2017,4593,1927,3831,1412,943,3921,2078,3861,2751,680,4630,860,3965,3840,3880,3232,508,3287,4384,2216,2256,864,2221,2015,4954,1925,569,3380,108,2727,513,3009,542,2393,587,2146,1256,1832,4767,4469,4639,1871,1204,2900,2008,4854,1409,4436,619,4240,4410,532,265,4511,4671,4132,3855,4088,352,4223,4256,1547,2137,1933,4662,3496,1860,602,1433,2452,2755,778,685,765,1315,3981,4454,3709,888,273,4379,4493,561,3093,4016,2085,274,3702,808,3412,2114,4336,1121,1251,4344,1957,2674,4006,1327,2479,947,3439,3189,2499,1792,4278,3343,2300,299,3271,59,3319,2190,2303,2375,3431,1101,4903,2119,391,563,324,28,4657,4820,1481,3852,2047,4521,4781,3945,3445,1830,3034,2163,2862,3186,4612,764,3313,2954,4011,1296,3906,164,3954,1607,514,1819,3253,989,3375,4060,2267,134,1159,624,4126,3815,2,2451,2825,3021,2196,2894,2776,1531,4778,1940,2888,420,2217,306,127,1511,1696,2944,3527,1746,3110,987,4697,4207,2865,170,3387,2325,1602,4303,713,490,1431,895,4233,2716,4476,2092,2614,4227,1657,4175,791,2148,2507,1526,2473,4389,1656,4891,1386,1614,4085,862,1686,3386,3244,2066,528,30,1740,4051,1815,2589,2203,4381,2916,3882,2531,3731,3569,1002,671,1882,4694,689,1393,1163,901,1498,4012,3957,160,4368,4710,1922,1300,1654,1090,1502,397,2428,81,3558,1736,1266,1507,4681,3376,485,1340,4373,2918,4461,3533,2033,3622,3753,883,1489,2808,2132,1525,298,849,3177,443,2447,2968,3710,2651,998,4842,937,957,2124,3737,4309,2770,4872,3369,964,1410,4025,6,1254,4302,1538,4605,4120,2135,994,1897,271,2856,3424,27,2171,3893,3466,1821,2750,759,4243,824,2830,4971,1468,371,1267,4397,1625,1388,4669,4491,2266,1457,3931,4241,2415,1214,246,2064,3462,1111,4339,2597,331,1556,1641,1082,385,575,4730,598,3848,3137,1622,948,3390,4071,3837,1426,2430,4554,2013,1006,3066,1771,960,3238,4885,168,2885,2413,915,4797,2179,441,1709,551,3242,4439,3197,1935,3230,1772,3050,2097,3795,1785,4412,172,4036,2478,1131,3884,4232,3913,1888,4654,1904,3699,3233,3888,2534,269,2083,1036,3955,639,918,4693,4259,1780,2285,4552,1855,2742,3856,2046,1263,143,4586,4458,1019,347,4700,2130,4909,152,3970,3234,1239,3633,1574,4492,1136,4556,1725,2231,3322,2139,3042,2618,2630,2263,470,3139,2769,1846,1774,620,3327,1369,651,4393,1994,1606,911,2037,2291,1958,4573,43,1231,1126,1899,2057,1010,4790,1469,4895,1350,4565,1319,779,2593,4623,1401,462,2661,786,3776,4403,1986,3793,1015,4633,2423,1701,4341,2448,4367,150,3898,4590,1172,3499,2699,3654,1205,1320,881,3372,4882,3200,3807,4199,2792,4508,4949,4213,2049,2123,2506,333,4500,3086,4265,1487,4596,4680,4993,2730,2728,3804,1902,1269,539,2296,2999,2157,2117,3475,2467,2678,4390,3400,4445,848,827,2794,3187,2849,119,1793,601,4770,1040,131,4464,4530,679,703,3440,3962,787,1279,267,117,382,3767,4561,3563,552,4539,3595,3455,3465,1838,3309,3719,2095,2462,3164,3890,1868,2712,690,4814,3809,3088,1477,4002,3109,890,4301,3382,3915,2166,1200,1945,411,1715,1813,4640,237,3878,4230,4738,3691,3942,1185,3862,2698,2442,4001,4938,4034,3028,3261,3910,1422,753,360,3320,3264,1288,3925,3391,701,1155,4327,926,4659,980,4457,222,898,3813,3939,3727,4571,3263,4338,1583,3768,702,2206,3609,3902,3677,4375,1304,2829,4432,3578,249,447,1765,636,3909,1358,467,3582,361,1965,3777,959,1100,1060,2332,1439,1180,799,3865,4292,4273,2477,3216,1520,917,3730,2871,3306,3618,2297,4350,2562,761,3656,1234,4417,2838,3451,4741,1599,2386,4040,2149,3115,29,4334,475,3812,4460,3257,2603,1516,992,4257,1331,2133,3338,3378,4979,559,2684,790,4978,4577,2032,3824,1767,3340,4928,4879,2352,515,1903,3949,2436,2277,3530,4902,1532,3152,263,4547,3384,556,421,1299,4288,4033,4537,4563,803,3544,434,1095,2420,1069,908,1534,1848,3446,1552,4348,4757,4799,2317,452,2635,4039,3157,839,1140,1529,516,3407,2188,1973,1221,4600,1822,4311,4092,2030,277,1058,3917,2737,2529,1360,932,2005,3621,4578,3165,1419,3712,1210,1747,2623,2338,4651,1938,4238,1160,962,1671,2257,1592,3015,2113,2191,2947,1667,1052,1343,3418,971,4852,2824,1191,1046,675,3584,4495,3889,3420,4728,51,493,350,3805,2464,892,472,2379,376,2525,375,2547,91,4106,909,4762,228,2275,2164,547,1536,1528,4666,4152,93,854,2714,4808,1629,4965,4559,2312,1894,1681,2445,1659,4074,4275,4665,3969,210,4186,63,4008,2867,3046,348,3905,2852,2205,1611,3534,2145,1396,4095,4142,4156,3775,641,743,1480,1977,719,4248,4258,2001,2676,1152,4185,3012,1929,282,1482,2437,4411,4127,4406,4907,2059,4343,133,2761,2936,2956,1164,1619,1560,1241,1852,668,2655,369,653,3674,346,1564,574,676,4426,4713,4021,3631,4100,3583,3243,2238,2706,4609,2127,1951,3388,656,3501,4520,2556,4740,4007,4771,279,1653,2969,746,1022,3018,3771,1803,1272,4863,4549,3567,2470,4134,751,3143,4178,3868,3103,3125,2967,621,335,2431,2138,3570,1324,4690,1189,2566,4356,4078,4061,3760,1076,3828,584,2502,3542,1055,568,3267,1850,287,2449,35,3225,1760,2909,2689,4498,3597,4656,4999,4038,3620,2276,4497,3260,4840,3967,3448,534,4592,2235,2475,2052,2958,4935,2905,1636,581,1031,2292,2636,3822,3552,2964,4252,4421,3474,698,3707,4494,1757,1394,3935,1710,531,1920,2632,132,4543,1053,2247,845,4217,1303,2109,413,2011,2941,4615,882,3508,3477,4383,629,2228,4682,3268,125,2860,1703,4725,468,3678,328,3657,4430,2024,2410,1646,1738,3750,291,17,1235,2700,3148,2763,826,2787,4748,1080,4959,4836,1789,974,672,2647,2411,449,4768,1238,684,4996,4794,662,1978,1544,1145,3655,440,4785,4944,405,253,1543,4425,1067,89,313,4471,2948,1600,2922,3485,1463,3488,46,2089,4614,1045,2281,1761,678,2311,76,2622,3961,2693,692,737,3072,863,255,2930,2514,610,695,3525,1816,4823,540,1714,4313,1464,2258,4562,3870,2951,3423,2151,2834,167,1734,2409,4867,3619,4661,1730,2226,2896,2359,634,2723,2844,2521,4194,868,2022,3732,1408,817,4014,3951,128,1227,633,3171,435,4947,2194,3255,2334,2509,4419,1610,1719,4486,1630,4129,3149,712,378,2215,813,236,321,1829,309,4650,4310,2570,537,3296,3399,1383,1166,370,1963,4906,4087,2998,3217,3742,4663,2881,3068,608,2594,2202,1181,3201,1939,494,2025,4997,963,1261,3565,4684,4130,3346,426,2261,4360,158,1371,1003,4077,3480,2973,3265,2219,4865,4560,1907,3798,1787,3774,1689,4165,2981,2128,4055,520,2645,544,2877,1427,1404,4722,2659,2851,1364,4466,2708,3130,1705,777,2617,3222,40,1669,2040,1733,1844,1389,834,2298,275,317,3918,2492,1118,3437,7,1548,2212,2569,3209,1665,24,4644,2705,4254,1802,310,844,4437,618,4251,2997,1624,4098,2232,1572,1146,2330,4579,2042,3275,4733,3843,3231,3571,4913,3830,3911,3365,972,3207,3416,3984,2490,2658,1402,2672,4484,4462,1834,4515,3722,4826,4792,617,2486,2925,4719,2112,3613,149,850,314,1905,4347,194,3589,2939,967,2773,491,1011,2765,2592,1936,1448,1078,2902,2634,4415,3083,4726,696,4455,1956,4875,2444,1672,450,4420,4953,3140,1273,3733,4374,2642,688,2703,4052,717,399,1864,1286,4333,220,2790,3153,2670,1571,2455,3847,115,691,4766,2915,499,4192,3755,3626,3470,966,1259,577,553,2633,2407,2980,1357,2342,802,1623,2764,1769,3270,1103,1199,1070,4983,1112,4137,632,13,4585,3801,3192,2220,4433,4196,3916,4146,2116,3168,1278,886,2131,4110,2552,280,2868,4708,4796,1798,2469,1063,1518,2924,484,1471,3321,3122,3651,1998,505,1460,616,933,186,913,3698,463,996,1513,2186,3142,3866,4277,1474,305,4714,3690,2907,3528,647,4922,95,2165,1153,394,2861,2715,4255,4760,2426,3331,2051,3054,3163,4056,4193,3011,1735,2419,3355,3696,2933,4003,988,981,2458,96,1980,4359,344,3850,1505,4046,683,1212,3350,4538,1305,1770,1851,2872,1478,204,4731,644,2020,1387,2815,3293,3904,2058,1867,1527,1363,148,3547,1517,4191,3919,2440,1554,3693,2624,3997,458,583,4295,4818,1926,1593,2404,2505,1594,1086,359,3020,842,654,4636,3994,2241,874,3402,4101,326,2840,1959,611,45075};

        System.out.println("Verilen Dizi");
        printArray(array);

        ForkJoinPool pool = new ForkJoinPool();
        ParallelMergeSort task = new ParallelMergeSort(array, 0, array.length - 1);

        long startTime = System.currentTimeMillis(); // Başlangıç zamanı
        pool.invoke(task);
        long endTime = System.currentTimeMillis(); // Bitiş zamanı

        System.out.println("\nSıralanmış Dizi");
        printArray(array);

        System.out.println("\nÇalışma Zamanı: " + (endTime - startTime) + " milisaniye");
    }

    private static void printArray(int[] array) {
        for (int value : array) {
            System.out.print(value + " ");
        }
        System.out.println();
    }
}
